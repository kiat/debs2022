# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: messages/challenger.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.protobuf import timestamp_pb2 as google_dot_protobuf_dot_timestamp__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x19messages/challenger.proto\x12\nChallenger\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x92\x01\n\x05\x45vent\x12\x0e\n\x06symbol\x18\x01 \x01(\t\x12/\n\rsecurity_type\x18\x02 \x01(\x0e\x32\x18.Challenger.SecurityType\x12\x18\n\x10last_trade_price\x18\x03 \x01(\x02\x12.\n\nlast_trade\x18\x04 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\"`\n\x05\x42\x61tch\x12\x0e\n\x06seq_id\x18\x01 \x01(\x03\x12\x0c\n\x04last\x18\x02 \x01(\x08\x12\x16\n\x0elookup_symbols\x18\x03 \x03(\t\x12!\n\x06\x65vents\x18\x04 \x03(\x0b\x32\x11.Challenger.Event\"\x17\n\tBenchmark\x12\n\n\x02id\x18\x01 \x01(\x03\"<\n\tIndicator\x12\x0e\n\x06symbol\x18\x01 \x01(\t\x12\x0e\n\x06\x65ma_38\x18\x02 \x01(\x02\x12\x0f\n\x07\x65ma_100\x18\x03 \x01(\x02\"a\n\x08ResultQ1\x12\x14\n\x0c\x62\x65nchmark_id\x18\x01 \x01(\x03\x12\x14\n\x0c\x62\x61tch_seq_id\x18\x02 \x01(\x03\x12)\n\nindicators\x18\x03 \x03(\x0b\x32\x15.Challenger.Indicator\"\xd6\x01\n\x0e\x43rossoverEvent\x12&\n\x02ts\x18\x01 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12\x0e\n\x06symbol\x18\x02 \x01(\t\x12/\n\rsecurity_type\x18\x03 \x01(\x0e\x32\x18.Challenger.SecurityType\x12:\n\x0bsignal_type\x18\x04 \x01(\x0e\x32%.Challenger.CrossoverEvent.SignalType\"\x1f\n\nSignalType\x12\x07\n\x03\x42uy\x10\x00\x12\x08\n\x04Sell\x10\x01\"l\n\x08ResultQ2\x12\x14\n\x0c\x62\x65nchmark_id\x18\x01 \x01(\x03\x12\x14\n\x0c\x62\x61tch_seq_id\x18\x02 \x01(\x03\x12\x34\n\x10\x63rossover_events\x18\x03 \x03(\x0b\x32\x1a.Challenger.CrossoverEvent\"{\n\x16\x42\x65nchmarkConfiguration\x12\r\n\x05token\x18\x01 \x01(\t\x12\x16\n\x0e\x62\x65nchmark_name\x18\x02 \x01(\t\x12\x16\n\x0e\x62\x65nchmark_type\x18\x03 \x01(\t\x12\"\n\x07queries\x18\x04 \x03(\x0e\x32\x11.Challenger.Query*%\n\x0cSecurityType\x12\n\n\x06\x45quity\x10\x00\x12\t\n\x05Index\x10\x01*\x17\n\x05Query\x12\x06\n\x02Q1\x10\x00\x12\x06\n\x02Q2\x10\x01\x32\x88\x03\n\nChallenger\x12O\n\x12\x63reateNewBenchmark\x12\".Challenger.BenchmarkConfiguration\x1a\x15.Challenger.Benchmark\x12?\n\x0estartBenchmark\x12\x15.Challenger.Benchmark\x1a\x16.google.protobuf.Empty\x12\x35\n\tnextBatch\x12\x15.Challenger.Benchmark\x1a\x11.Challenger.Batch\x12\x38\n\x08resultQ1\x12\x14.Challenger.ResultQ1\x1a\x16.google.protobuf.Empty\x12\x38\n\x08resultQ2\x12\x14.Challenger.ResultQ2\x1a\x16.google.protobuf.Empty\x12=\n\x0c\x65ndBenchmark\x12\x15.Challenger.Benchmark\x1a\x16.google.protobuf.EmptyB)\n\x14\x64\x65.tum.i13.challengeB\x0f\x43hallengerProtoP\x01\x62\x06proto3')

_SECURITYTYPE = DESCRIPTOR.enum_types_by_name['SecurityType']
SecurityType = enum_type_wrapper.EnumTypeWrapper(_SECURITYTYPE)
_QUERY = DESCRIPTOR.enum_types_by_name['Query']
Query = enum_type_wrapper.EnumTypeWrapper(_QUERY)
Equity = 0
Index = 1
Q1 = 0
Q2 = 1


_EVENT = DESCRIPTOR.message_types_by_name['Event']
_BATCH = DESCRIPTOR.message_types_by_name['Batch']
_BENCHMARK = DESCRIPTOR.message_types_by_name['Benchmark']
_INDICATOR = DESCRIPTOR.message_types_by_name['Indicator']
_RESULTQ1 = DESCRIPTOR.message_types_by_name['ResultQ1']
_CROSSOVEREVENT = DESCRIPTOR.message_types_by_name['CrossoverEvent']
_RESULTQ2 = DESCRIPTOR.message_types_by_name['ResultQ2']
_BENCHMARKCONFIGURATION = DESCRIPTOR.message_types_by_name['BenchmarkConfiguration']
_CROSSOVEREVENT_SIGNALTYPE = _CROSSOVEREVENT.enum_types_by_name['SignalType']
Event = _reflection.GeneratedProtocolMessageType('Event', (_message.Message,), {
  'DESCRIPTOR' : _EVENT,
  '__module__' : 'messages.challenger_pb2'
  # @@protoc_insertion_point(class_scope:Challenger.Event)
  })
_sym_db.RegisterMessage(Event)

Batch = _reflection.GeneratedProtocolMessageType('Batch', (_message.Message,), {
  'DESCRIPTOR' : _BATCH,
  '__module__' : 'messages.challenger_pb2'
  # @@protoc_insertion_point(class_scope:Challenger.Batch)
  })
_sym_db.RegisterMessage(Batch)

Benchmark = _reflection.GeneratedProtocolMessageType('Benchmark', (_message.Message,), {
  'DESCRIPTOR' : _BENCHMARK,
  '__module__' : 'messages.challenger_pb2'
  # @@protoc_insertion_point(class_scope:Challenger.Benchmark)
  })
_sym_db.RegisterMessage(Benchmark)

Indicator = _reflection.GeneratedProtocolMessageType('Indicator', (_message.Message,), {
  'DESCRIPTOR' : _INDICATOR,
  '__module__' : 'messages.challenger_pb2'
  # @@protoc_insertion_point(class_scope:Challenger.Indicator)
  })
_sym_db.RegisterMessage(Indicator)

ResultQ1 = _reflection.GeneratedProtocolMessageType('ResultQ1', (_message.Message,), {
  'DESCRIPTOR' : _RESULTQ1,
  '__module__' : 'messages.challenger_pb2'
  # @@protoc_insertion_point(class_scope:Challenger.ResultQ1)
  })
_sym_db.RegisterMessage(ResultQ1)

CrossoverEvent = _reflection.GeneratedProtocolMessageType('CrossoverEvent', (_message.Message,), {
  'DESCRIPTOR' : _CROSSOVEREVENT,
  '__module__' : 'messages.challenger_pb2'
  # @@protoc_insertion_point(class_scope:Challenger.CrossoverEvent)
  })
_sym_db.RegisterMessage(CrossoverEvent)

ResultQ2 = _reflection.GeneratedProtocolMessageType('ResultQ2', (_message.Message,), {
  'DESCRIPTOR' : _RESULTQ2,
  '__module__' : 'messages.challenger_pb2'
  # @@protoc_insertion_point(class_scope:Challenger.ResultQ2)
  })
_sym_db.RegisterMessage(ResultQ2)

BenchmarkConfiguration = _reflection.GeneratedProtocolMessageType('BenchmarkConfiguration', (_message.Message,), {
  'DESCRIPTOR' : _BENCHMARKCONFIGURATION,
  '__module__' : 'messages.challenger_pb2'
  # @@protoc_insertion_point(class_scope:Challenger.BenchmarkConfiguration)
  })
_sym_db.RegisterMessage(BenchmarkConfiguration)

_CHALLENGER = DESCRIPTOR.services_by_name['Challenger']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\024de.tum.i13.challengeB\017ChallengerProtoP\001'
  _SECURITYTYPE._serialized_start=988
  _SECURITYTYPE._serialized_end=1025
  _QUERY._serialized_start=1027
  _QUERY._serialized_end=1050
  _EVENT._serialized_start=104
  _EVENT._serialized_end=250
  _BATCH._serialized_start=252
  _BATCH._serialized_end=348
  _BENCHMARK._serialized_start=350
  _BENCHMARK._serialized_end=373
  _INDICATOR._serialized_start=375
  _INDICATOR._serialized_end=435
  _RESULTQ1._serialized_start=437
  _RESULTQ1._serialized_end=534
  _CROSSOVEREVENT._serialized_start=537
  _CROSSOVEREVENT._serialized_end=751
  _CROSSOVEREVENT_SIGNALTYPE._serialized_start=720
  _CROSSOVEREVENT_SIGNALTYPE._serialized_end=751
  _RESULTQ2._serialized_start=753
  _RESULTQ2._serialized_end=861
  _BENCHMARKCONFIGURATION._serialized_start=863
  _BENCHMARKCONFIGURATION._serialized_end=986
  _CHALLENGER._serialized_start=1053
  _CHALLENGER._serialized_end=1445
# @@protoc_insertion_point(module_scope)
